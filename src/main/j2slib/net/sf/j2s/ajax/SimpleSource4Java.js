$_J("net.sf.j2s.ajax");
$_L(null,"net.sf.j2s.ajax.SimpleSource4Java",["java.io.File","java.lang.StringBuffer","java.util.ArrayList","$.Date","$.HashSet","net.sf.j2s.ajax.ISimpleConstant","$.SimplePipeRunnable","$.SimpleSerializable","$.SourceUtils"],function(){
c$=$_T(net.sf.j2s.ajax,"SimpleSource4Java");
c$.generateSourceFromInterface=$_M(c$,"generateSourceFromInterface",
function(interfaceClazz){
var source=new StringBuffer();
var date=new java.util.Date();
source.append("/**\r\n");
source.append(" * Generated by Java2Script.\r\n");
source.append(" * Copyright (c) ");
source.append(date.getYear()+1900);
source.append(" ");
source.append(net.sf.j2s.ajax.SimpleSource4Java.company);
source.append(". All rights reserved.\r\n");
source.append(" */\r\n");
source.append("\r\n");
var index=0;
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"",index++,true);
var clazzName=interfaceClazz.getName();
var simpleClazzName=clazzName;
var idx=clazzName.lastIndexOf('.');
if(idx!=-1){
source.append("package ");
source.append(simpleClazzName.substring(0,idx));
source.append(";\r\n");
source.append("\r\n");
simpleClazzName=clazzName.substring(idx+1);
}net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"",index++,true);
var superClazz=interfaceClazz.getSuperclass();
if(superClazz!=null){
var superClazzName=superClazz.getName();
source.append("import ");
source.append(superClazzName);
source.append(";\r\n");
source.append("\r\n");
idx=superClazzName.lastIndexOf('.');
if(idx!=-1){
superClazzName=superClazzName.substring(idx+1);
}net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"",index++,true);
source.append("public interface ");
source.append(simpleClazzName);
source.append(" extends ");
source.append(superClazzName);
net.sf.j2s.ajax.SourceUtils.insertBlockComment(source,index++);
source.append("{\r\n");
}else{
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"",index++,true);
source.append("public interface ");
source.append(simpleClazzName);
net.sf.j2s.ajax.SourceUtils.insertBlockComment(source,index++);
source.append("{\r\n");
}source.append("\r\n");
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"\t",index++,true);
var gotStaticFinalFields=false;
var clazzFields=interfaceClazz.getDeclaredFields();
for(var i=0;i<clazzFields.length;i++){
var f=clazzFields[i];
var modifiers=f.getModifiers();
if((modifiers&(1))!=0&&(modifiers&8)!=0&&(modifiers&16)!=0){
var type=f.getType();
if(type===Number||type===Number||type===Number||type===Number||type===Number||type===Number||type===Number||type===Boolean||type===String){
source.append("\tpublic ");
source.append(type.getSimpleName());
source.append(" ");
source.append(f.getName());
source.append(" = ");
try{
if(type===Number){
source.append(""+f.getInt(interfaceClazz));
}else if(type===Number){
source.append(f.getLong(interfaceClazz)+"L");
}else if(type===Number){
source.append(""+f.getShort(interfaceClazz));
}else if(type===Number){
source.append(""+f.getByte(interfaceClazz));
}else if(type===Number){
source.append("\'"+f.getChar(interfaceClazz)+"\'");
}else if(type===Number){
source.append(""+f.getFloat(interfaceClazz));
}else if(type===Number){
source.append(""+f.getDouble(interfaceClazz));
}else if(type===Boolean){
if(f.getBoolean(interfaceClazz)){
source.append("true");
}else{
source.append("false");
}}else if(type===String){
source.append("\""+f.get(interfaceClazz)+"\"");
}}catch(e){
e.printStackTrace();
}
source.append(";\r\n");
gotStaticFinalFields=true;
}else{
System.out.println("Not supporting type "+type+" for field "+f.getName());
}}}
if(gotStaticFinalFields){
source.append("\r\n");
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"\t",index++,true);
}source.append("}\r\n");
return source.toString();
},"Class");
c$.generateSourceFromObject=$_M(c$,"generateSourceFromObject",
function(s){
var source=new StringBuffer();
var date=new java.util.Date();
source.append("/**\r\n");
source.append(" * Generated by Java2Script.\r\n");
source.append(" * Copyright (c) ");
source.append(date.getYear()+1900);
source.append(" ");
source.append(net.sf.j2s.ajax.SimpleSource4Java.company);
source.append(". All rights reserved.\r\n");
source.append(" */\r\n");
source.append("\r\n");
var index=0;
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"",index++,true);
var clazz=s.getClass();
var clazzName=clazz.getName();
var simpleClazzName=clazzName;
var idx=clazzName.lastIndexOf('.');
if(idx!=-1){
source.append("package ");
source.append(simpleClazzName.substring(0,idx));
source.append(";\r\n");
source.append("\r\n");
simpleClazzName=clazzName.substring(idx+1);
}net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"",index++,true);
var hasMoreImports=false;
var importedClasses=new java.util.HashSet();
var interfaces=s.getClass().getGenericInterfaces();
if(interfaces!=null&&interfaces.length>0){
for(var i=0;i<interfaces.length;i++){
var t=interfaces[i];
if(!net.sf.j2s.ajax.SimpleSerializable.isSubInterfaceOf(t,net.sf.j2s.ajax.ISimpleConstant)){
continue;
}var typeName=t.getName();
hasMoreImports=true;
if(!importedClasses.contains(typeName)){
var simpleTypeName=typeName;
source.append("import ");
source.append(simpleTypeName);
source.append(";\r\n");
importedClasses.add(typeName);
}}
}var gotStaticFinalFields=false;
var clazzFields=clazz.getDeclaredFields();
var fields=new java.util.ArrayList();
for(var i=0;i<clazzFields.length;i++){
var f=clazzFields[i];
var modifiers=f.getModifiers();
if((modifiers&(1))!=0&&(modifiers&(136))==0){
fields.add(f);
}}
for(var itr=fields.iterator();itr.hasNext();){
var field=itr.next();
var type=field.getType();
if(net.sf.j2s.ajax.SimpleSerializable.isSubclassOf(type,net.sf.j2s.ajax.SimpleSerializable)||net.sf.j2s.ajax.SimpleSerializable.isSubclassOf(type,Array)){
hasMoreImports=true;
var typeName=type.isArray()?type.getComponentType().getName():type.getName();
if(!importedClasses.contains(typeName)){
source.append("import ");
source.append(typeName);
source.append(";\r\n");
importedClasses.add(typeName);
}}}
var superClazz=s.getClass().getSuperclass();
if(superClazz!=null){
var superClazzName=superClazz.getName();
source.append("import ");
source.append(superClazzName);
source.append(";\r\n");
if(net.sf.j2s.ajax.SimpleSerializable.isSubclassOf(superClazz,net.sf.j2s.ajax.SimplePipeRunnable)){
var methods=s.getClass().getMethods();
if(methods!=null){
for(var i=0;i<methods.length;i++){
var m=methods[i];
if("deal".equals(m.getName())){
var params=m.getParameterTypes();
if(params!=null&&params.length==1){
var paramType=params[0];
var paramClazzName=paramType.getName();
source.append("import ");
source.append(paramClazzName);
source.append(";\r\n");
}}}
}}idx=superClazzName.lastIndexOf('.');
if(idx!=-1){
superClazzName=superClazzName.substring(idx+1);
}source.append("\r\n");
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"",index++,true);
source.append("public class ");
source.append(simpleClazzName);
source.append(" extends ");
source.append(superClazzName);
}else{
if(hasMoreImports){
source.append("\r\n");
}net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"",index++,true);
source.append("public class ");
source.append(simpleClazzName);
}if(interfaces!=null&&interfaces.length>0){
var keywordAppended=false;
for(var i=0;i<interfaces.length;i++){
var t=interfaces[i];
if(!net.sf.j2s.ajax.SimpleSerializable.isSubInterfaceOf(t,net.sf.j2s.ajax.ISimpleConstant)){
continue;
}if(!keywordAppended){
source.append(" implements ");
keywordAppended=true;
}var typeName=t.getName();
var simpleTypeName=typeName;
idx=simpleTypeName.lastIndexOf('.');
if(idx!=-1){
simpleTypeName=simpleTypeName.substring(idx+1);
}source.append(simpleTypeName);
if(i!=interfaces.length-1){
source.append(", ");
}}
}net.sf.j2s.ajax.SourceUtils.insertBlockComment(source,index++);
source.append("{\r\n\r\n");
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"\t",index++,true);
for(var i=0;i<clazzFields.length;i++){
var f=clazzFields[i];
var modifiers=f.getModifiers();
if((modifiers&(1))!=0&&(modifiers&8)!=0&&(modifiers&16)!=0){
var type=f.getType();
if(type===Number||type===Number||type===Number||type===Number||type===Number||type===Number||type===Number||type===Boolean||type===String){
source.append("\tpublic static final ");
source.append(type.getSimpleName());
source.append(" ");
source.append(f.getName());
source.append(" = ");
try{
if(type===Number){
source.append(""+f.getInt(s.getClass()));
}else if(type===Number){
source.append(f.getLong(s.getClass())+"L");
}else if(type===Number){
source.append(""+f.getShort(s.getClass()));
}else if(type===Number){
source.append(""+f.getByte(s.getClass()));
}else if(type===Number){
source.append("\'"+f.getChar(s.getClass())+"\'");
}else if(type===Number){
source.append(""+f.getFloat(s.getClass()));
}else if(type===Number){
source.append(""+f.getDouble(s.getClass()));
}else if(type===Boolean){
if(f.getBoolean(s.getClass())){
source.append("true");
}else{
source.append("false");
}}else if(type===String){
source.append("\""+f.get(s.getClass())+"\"");
}}catch(e){
e.printStackTrace();
}
source.append(";\r\n");
gotStaticFinalFields=true;
}else{
System.out.println("Not supporting type "+type+" for field "+f.getName());
}}}
if(gotStaticFinalFields){
source.append("\r\n");
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"\t",index++,true);
}else{
index++;
}for(var itr=fields.iterator();itr.hasNext();){
var field=itr.next();
var name=field.getName();
var type=field.getType();
if(type===Number||type===Number||type===Number||type===Number||type===Number||type===Number||type===Number||type===Boolean||type===String||net.sf.j2s.ajax.SimpleSerializable.isSubclassOf(type,net.sf.j2s.ajax.SimpleSerializable)||type===Array||type===Array||type===Array||type===Array||type===Array||type===Array||type===Array||type===Array||type===Array||net.sf.j2s.ajax.SimpleSerializable.isSubclassOf(type,Array)){
source.append("\tpublic ");
source.append(type.getSimpleName());
source.append(" ");
source.append(name);
source.append(";\r\n");
}else{
System.out.println("Unsupported type "+type);
}}
source.append("\r\n");
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"\t",index++,true);
var moreCodesAdded=false;
if(s.bytesCompactMode()){
source.append("\tpublic boolean bytesCompactMode() {\r\n");
source.append("\t\treturn true;\r\n");
source.append("\t}\r\n");
source.append("\r\n");
moreCodesAdded=true;
}if($_O(s,net.sf.j2s.ajax.SimplePipeRunnable)){
source.append("\t@Override\r\n");
source.append("\tpublic boolean pipeSetup() {\r\n");
source.append("\t\treturn true;\r\n");
source.append("\t}\r\n");
source.append("\r\n");
source.append("\t@Override\r\n");
source.append("\tpublic SimpleSerializable[] through(Object... args) {\r\n");
source.append("\t\treturn null;\r\n");
source.append("\t}\r\n");
source.append("\r\n");
var methods=s.getClass().getMethods();
if(methods!=null){
for(var i=0;i<methods.length;i++){
var m=methods[i];
if("deal".equals(m.getName())){
var params=m.getParameterTypes();
if(params!=null&&params.length==1){
var paramType=params[0];
var paramClazzName=paramType.getName();
if("net.sf.j2s.ajax.SimpleSerializable".equals(paramClazzName)){
continue;
}var paramIdx=paramClazzName.lastIndexOf('.');
if(paramIdx!=-1){
paramClazzName=paramClazzName.substring(paramIdx+1);
}source.append("\tpublic boolean deal(");
source.append(paramClazzName);
source.append(" e) {\r\n");
source.append("\t\treturn true;\r\n");
source.append("\t}\r\n");
source.append("\r\n");
}}}
}moreCodesAdded=true;
}else if($_O(s,net.sf.j2s.ajax.SimpleRPCRunnable)){
source.append("\t@Override\r\n");
source.append("\tpublic void ajaxRun() {\r\n");
source.append("\t}\r\n");
source.append("\r\n");
moreCodesAdded=true;
}if(moreCodesAdded){
net.sf.j2s.ajax.SourceUtils.insertLineComment(source,"\t",index++,true);
}source.append("}\r\n");
return source.toString();
},"net.sf.j2s.ajax.SimpleSerializable");
c$.main=$_M(c$,"main",
function(args){
if(args==null||args.length<3){
System.out.println("Usage: "+net.sf.j2s.ajax.SimpleSource4Java.getName()+" <sources folder> <author> <orgization or company> <class> [class ...]");
return;
}var targetFolder=args[0];
var f=new java.io.File(targetFolder);
if(f.exists()){
if(!f.isDirectory()){
System.out.println("Target folder "+f.getAbsolutePath()+" is not a folder.");
return;
}}else{
var ok=f.mkdirs();
if(!ok){
System.out.println("Failed to create target folder "+f.getAbsolutePath()+".");
return;
}}($t$=net.sf.j2s.ajax.SimpleSource4Java.folder=f.getName(),net.sf.j2s.ajax.SimpleSource4Java.prototype.folder=net.sf.j2s.ajax.SimpleSource4Java.folder,$t$);
($t$=net.sf.j2s.ajax.SimpleSource4Java.author=args[1],net.sf.j2s.ajax.SimpleSource4Java.prototype.author=net.sf.j2s.ajax.SimpleSource4Java.author,$t$);
($t$=net.sf.j2s.ajax.SimpleSource4Java.company=args[2],net.sf.j2s.ajax.SimpleSource4Java.prototype.company=net.sf.j2s.ajax.SimpleSource4Java.company,$t$);
for(var i=3;i<args.length;i++){
var j2sSimpleClazz=args[i];
try{
var clazz=Class.forName(j2sSimpleClazz);
if(clazz.isInterface()){
var simpleName=j2sSimpleClazz;
var packageName=null;
var idx=j2sSimpleClazz.lastIndexOf('.');
if(idx!=-1){
packageName=j2sSimpleClazz.substring(0,idx);
packageName=packageName.$replace('.',java.io.File.separatorChar);
simpleName=j2sSimpleClazz.substring(idx+1);
}var javaSource=net.sf.j2s.ajax.SimpleSource4Java.generateSourceFromInterface(clazz);
var targetPath=targetFolder;
if(packageName!=null){
if(targetPath.endsWith(java.io.File.separator)){
targetPath=targetPath+packageName;
}else{
targetPath=targetPath+java.io.File.separator+packageName;
}var folder=new java.io.File(targetPath);
if(!folder.exists()){
folder.mkdirs();
}}var javaFile=new java.io.File(targetPath,simpleName+".java");
net.sf.j2s.ajax.SourceUtils.updateSourceContent(javaFile,javaSource);
System.out.println(javaFile.getAbsolutePath());
continue;
}var inst=clazz.newInstance();
if($_O(inst,net.sf.j2s.ajax.SimpleSerializable)){
var s=inst;
var simpleName=j2sSimpleClazz;
var packageName=null;
var idx=j2sSimpleClazz.lastIndexOf('.');
if(idx!=-1){
packageName=j2sSimpleClazz.substring(0,idx);
packageName=packageName.$replace('.',java.io.File.separatorChar);
simpleName=j2sSimpleClazz.substring(idx+1);
}var javaSource=net.sf.j2s.ajax.SimpleSource4Java.generateSourceFromObject(s);
var targetPath=targetFolder;
if(packageName!=null){
if(targetPath.endsWith(java.io.File.separator)){
targetPath=targetPath+packageName;
}else{
targetPath=targetPath+java.io.File.separator+packageName;
}var folder=new java.io.File(targetPath);
if(!folder.exists()){
folder.mkdirs();
}}var javaFile=new java.io.File(targetPath,simpleName+".java");
net.sf.j2s.ajax.SourceUtils.updateSourceContent(javaFile,javaSource);
System.out.println(javaFile.getAbsolutePath());
}}catch(e){
System.out.println("Error: "+j2sSimpleClazz);
e.printStackTrace();
}
}
},"~A");
$_S(c$,
"folder","Project",
"author","Author",
"company","Company");
});
